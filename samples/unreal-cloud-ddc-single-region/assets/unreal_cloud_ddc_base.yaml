# This is the base settings of your deployment, most things should go into here except for anything that is unique to a single region
config:
  Scylla: &scylla-connection-info
    ConnectionString: Contact Points=${scylla_ips};Default Keyspace=jupiter;
  # if you have a locally attached filesystem for caching (we recommend you do) then this configures it
  #Filesystem:
  #  MaxSizeBytes: 800000000000 # 800 Gb - the amount of storage we can use on the storage

# This enables a worker deployment for your scheduled tasks - we recommend running with this to keep the api more responsive
worker:
  enabled: false

  # Any configuration specified in the api deployment that also applies to workers needs to be duplicated that is not part of the global scope
  config:
    Scylla: *scylla-connection-info
    GC:
      CleanOldRefRecords: false # this should be enabled in one region - it will delete old ref records no longer in use across the entire system.
      CleanOldBlobs: true # this will delete old blobs that are no longer referenced by any ref - this runs in each region to cleanup that regions blob stores

global:
   #AWS specific configuration
   cloudProvider: "AWS"
   awsRegion: ${region}
   awsRole: AssumeRoleWebIdentity # service accounts are IAM mapped

   auth:
    enabled: true
    defaultScheme: Bearer # this should match the name under schemes
    schemes:
      Bearer:
        implementation: "Okta"
        oktaDomain: ${okta_domain} # this will be given to you by your okta admin
        oktaAuthorizationServerId: ${okta_auth_server_id} # this will be given to you by your okta admin
        jwtAudience: ${jwt_audience} # the audience defined for the authorization server
        jwtAuthority: ${jwt_authority} # the full path to your authorization server - is usually <domain>/oauth2/<auth-server>

    acls:
    # This is an example of how to setup a claim to grant special privileges
    # In this case we expect a group called app-ddc-storage-admin to indicate admins which are granted full access to everything
    - claims:
      - groups=app-ddc-storage-admin
      actions:
      - ReadObject
      - WriteObject
      - DeleteObject
      - DeleteBucket
      - DeleteNamespace
      - AdminAction

   namespaces:
    Policies:
      unreal-cloud-ddc:
        acls:
        - actions:
          - ReadObject
          - WriteObject
          claims:
          - "*"
