{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>The Cloud Game Development Toolkit expedites studio setup through industry standard tools and with best practice infrastructure configuration from AWS.</p> <p>Info</p> <p>This project is under active development and we have yet to solve for many developer needs. If you would like to see something in this repository please create a feature request in the Issues tab, or raise a pull request. You'll find our contribution guidelines here.</p>"},{"location":"#introduction","title":"Introduction","text":"<p>The CGD Toolkit consists of four key components:</p> <ul> <li> <p>Assets</p> <p>Reusable Amazon Machine Image (AMI) templates written in Packer for common game development workloads.</p> <p> Learn about Assets</p> </li> <li> <p>Modules</p> <p>Configurable Terraform modules for simplified cloud deployment with best-practices by default.</p> <p> Learn about Modules</p> </li> <li> <p>Playbooks</p> <p>Automation scripts written with Ansible to configure workloads after deployment.</p> <p> Learn about Playbooks</p> </li> <li> <p>Samples</p> <p>Complete Terraform configurations for expedited studio setup that demonstrate module usage and integration with other AWS services.</p> <p> Learn about Samples</p> </li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Check the Getting Started.</p>"},{"location":"assets/","title":"Cloud Game Development Toolkit Assets","text":"<p>The Assets directory contains reusable scripts, pipeline definitions, Dockerfiles, Packer templates, and other resources that might prove useful or are dependencies of any of the modules.</p>"},{"location":"modules/","title":"Cloud Game Development Terraform Modules","text":""},{"location":"modules/#introduction","title":"Introduction","text":"<p>These modules simplify the deployment of common game development workloads on AWS. Some have pre-requisites that will be outlined in their respective documentation. They are designed to easily integrate with each other, and provide relevant outputs to simplify permissions, networking, and access.</p>"},{"location":"modules/#contribution","title":"Contribution","text":"<p>We recommend starting with the Terraform module documentation for a crash course in the way the CGD Toolkit is designed.</p> <p>Please follow these guidelines when developing a new module. These are also outlined in the pull-request template for Module additions.</p>"},{"location":"modules/#1-provider-configurations","title":"1. Provider Configurations","text":"<p>Modules should not define its own provider configurations. Required provider versions should be outlined in a <code>required_versions</code> block inside of a <code>terraform</code> block:</p> <pre><code>terraform {  \n    required_providers {    \n        aws = {      \n            source  = \"hashicorp/aws\"      \n            version = \"&gt;= 5.30.0\"    \n        }  \n    }\n}\n</code></pre>"},{"location":"modules/#2-dependency-inversion","title":"2. Dependency Inversion","text":"<p>It is fine if your module needs to declare significant networking or compute resources to run - the Cloud Game Development Toolkit is intended to be highly opinionated. At the same time, we require that modules support a significant level of dependency injection through variables to support diverse use cases. This is a simple consideration that is easier to incorporate from the beginning of module development rather than retroactively.</p> <p>For example, the Jenkins module can provision its own Elastic Container Service cluster, or it can deploy the Jenkins service onto an existing cluster passed via the <code>cluster_name</code> variable.</p>"},{"location":"modules/#3-assumptions-and-guarantees","title":"3. Assumptions and Guarantees","text":"<p>If your module requires certain input formats in order to function Terraform refers to these as \"assumptions.\"</p> <p>If your module provides certain outputs in a consistent format that other configurations should be able to rely on Terraform calls these \"guarantees.\"</p> <p>We recommend outlining your module's assumptions and guarantees prior to implementation by using Terraform custom conditions. These can be used to validate input variables, data blocks, resource attributes, and much more. They are incredibly powerful.</p>"},{"location":"modules/#4-third-party-software","title":"4. Third Party Software","text":"<p>The modules contained in the CGD Toolkit are designed to simplify infrastructure deployments of common game development workload. Naturally, modules may deploy third party applications - in these situations we require that deployments depend on existing licenses and distribution channels.</p> <p>If your module relies on a container or image that is not distributed through the CGD Toolkit we require a disclaimer and the usage of end-user credentials passed as a variable to the module. This repository is not to be used to redistribute software that may be subject to licensing or contractual agreements. </p> <p>If your module relies on a custom Amazon Machine Image (AMI) or container we ask that you provide a Packer template or Dockerfile in the assets directory and include instructions to create the image prior to infrastructure deployment.</p>"},{"location":"playbooks/","title":"Cloud Game Development Toolkit Playbooks","text":"<p>This directory contains automation scripts for configuring workloads after deployment. We've selected Ansible as our IT automation platform, but we envision this directory will contain SSM run documents, Chef recipes, and potentially just plain, old bash scripts in the long term.</p>"},{"location":"samples/","title":"Cloud Game Development Samples","text":"<p>The Terraform configurations contained in this directory demonstrate the use of the modules contained in the CGD Toolkit, and integrations with other common AWS workloads and services. Each sample architecture will provide its own documentation and instructions that follows the template below:</p>"},{"location":"samples/#1-predeployment","title":"1) Predeployment","text":"<p>In the predeployment phase the user is instructed to provision or take note of any necessary pre-existing resources. Creating SSL certificates or keypairs, provisioning Amazon Machine Images (AMIs) with Packer, or documenting existing resource IDs and names all fall into this phase.</p>"},{"location":"samples/#2-deployment","title":"2) Deployment","text":"<p>In the deployment phase the user is instructed to run <code>terraform apply</code> on one or more Terraform configurations with the appropriate variables.</p>"},{"location":"samples/#3-postdeployment","title":"3) Postdeployment","text":"<p>Finally, the postdeployment phase includes any Ansible playbooks or remote execution instructions for configuring the applications that have been deployed. These may be automated or manual steps.</p>"}]}