resource "null_resource" "packer_template" {
  count = var.enable_auto_ami_creation ? 1 : 0
  # Will only trigger this resource to re-run if changes are made to the local Perforce Packer Template
  # The file() functions reads he contents of a given file and returns the contents as a string
  triggers = {
    packer_template = md5(local_file.packer_template[0].content)
    p4_configure    = md5(local_file.p4_configure[0].content)
    p4_setup        = md5(local_file.p4_setup[0].content)

  }

  # Initialize packer in the autogenerated directory
  provisioner "local-exec" {
    working_dir = "${path.root}/autogen-packer/${var.instance_architecture}"
    command     = "packer init ."
  }
  # Format the packer template in the autogenerated directory
  provisioner "local-exec" {
    working_dir = "${path.root}/autogen-packer/${var.instance_architecture}"
    command     = "packer fmt ."
  }
  # Validate the packer template in the autogenerated directory
  provisioner "local-exec" {
    working_dir = "${path.root}/autogen-packer/${var.instance_architecture}"
    command     = "packer validate ."
  }
  # Build the AMI using the packer template in the autogenerated directory
  provisioner "local-exec" {
    working_dir = "${path.root}/autogen-packer/${var.instance_architecture}"
    command     = "packer build ${path.root}/perforce_${var.instance_architecture}.pkr.hcl"
  }

  # Run only when new version local Perforce Packer Template is generated
  depends_on = [
    local_file.packer_template
  ]
}
