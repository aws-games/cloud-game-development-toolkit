# Consolidated DDC configuration for both single and multi-region deployments
# Works with two parent module instances approach
config:
  # S3 configuration - connects to Terraform-created bucket
  S3: &s3-connection-info
    BucketName: ${bucket_name}  # Terraform variable: module.ddc_infra.s3_bucket_id
  
  # ScyllaDB configuration - connects via private DNS (preferred) or IPs (fallback)
  Scylla: &scylla-connection-info
    ConnectionString: Contact Points=${scylla_connection};Default Keyspace=jupiter;  # DNS preferred, IP fallback
    KeyspaceReplicationStrategy:
      class: "NetworkTopologyStrategy"
      ${region}: ${replication_factor}  # Terraform variables: var.region, var.scylla_replication_factor
    LocalDatacenterName: ${region}      # AWS region name
    LocalKeyspaceSuffix: "ddc"          # Keyspace naming convention
  # if you have a locally attached filesystem for caching (we recommend you do) then this configures it
  #Filesystem:
  #  MaxSizeBytes: 800000000000 # 800 Gb - the amount of storage we can use on the storage
  # Authentication configuration
  ServiceAccounts:
    Accounts:
      - Token: ${token}                    # DDC bearer token from Terraform-created secret
        Claims:                            # JWT claims for authorization
          - groups:app-cloud-ddc-project   # Basic DDC access group
          - groups:cloud-ddc-admin         # Administrative privileges group

global:
  #AWS specific configuration
  cloudProvider: "AWS"
  awsRegion: ${aws_region}
  siteName: ${aws_region}
  awsRole: AssumeRoleWebIdentity # service accounts are IAM mapped

  auth:
    defaultScheme: ServiceAccount # this should match the name under schemes
    schemes:
      ServiceAccount:
        implementation: ServiceAccount

    acls:
      # This is an example of how to setup a claim to grant special privileges
      # In this case we expect a group called app-ddc-storage-admin to indicate admins which are granted full access to everything
      - claims:
          - groups=cloud-ddc-admin
        actions:
          - ReadObject
          - WriteObject
          - DeleteObject
          - DeleteBucket
          - DeleteNamespace
          - AdminAction

  namespaces:
    Policies:
      ddc:
        acls:
          - actions:
              - ReadObject
              - WriteObject
            claims:
              - groups=app-cloud-ddc-project

replicaCount: 2

## Docker image configuration
image:
  repository: "ghcr.io/epicgames/unreal-cloud-ddc"
  pullPolicy: IfNotPresent

tolerations:
  - key: role
    operator: Equal
    value: unreal-cloud-ddc
    effect: NoSchedule

# default label for nvme node group
nodeSelector:
  "unreal-cloud-ddc/node-type": "nvme"

serviceAccount:
  create: false
  name: unreal-cloud-ddc-sa #based off of default variable in inter-cluster module

persistence:
  enabled: false
  volume:
    hostPath:
      path: /data
      type: Directory

  ## Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  #storageClass: "gp2"

  ## Persistent Volume Claim annotations
  ##
  annotations: {}
nginx:
  enabled: true
  useDomainSockets: true

## Service properties

service:
  annotations:
    # Connect to Terraform-created NLB target group (ClusterIP + target group = best of both worlds)
    service.beta.kubernetes.io/aws-load-balancer-target-group-arn: ${target_group_arn}  # Terraform variable: module.ddc_infra.nlb_target_group_arn

  type: ClusterIP          # Internal service only - no AWS resources created by Kubernetes
  portName: http           # Service port name
  port: 80                 # Service port (internal)
  targetPort: nginx-http   # Container port name
  extraPort:
    - name: http2
      port: 8080
      targetPort: nginx-h2

worker:
  enabled: true
  config:
    GC:
      CleanOldRefRecords: true
      CleanOldBlobs: true
      Replication:
        Enabled: ${replication_enabled}

    Scylla: *scylla-connection-info
    S3: *s3-connection-info

  tolerations:
    - key: role
      operator: Equal
      value: unreal-cloud-ddc
      effect: NoSchedule

  # default label for worker node group
  nodeSelector:
    "unreal-cloud-ddc/node-type": "worker"