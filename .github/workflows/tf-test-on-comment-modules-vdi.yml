name: 'Invoke Terraform test on Comment for VDI module'

# https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows
on:
  issue_comment:
    types: [created]

env:
  TF_LOG: INFO
  AWS_REGION: ${{vars.AWS_REGION}}

jobs:
  terraform-testing:
    # TODO: scope these permissions down
    permissions: write-all
    name: Terraform Testing
    # Only run if it is a PR and the comment contains '/run-vdi-module-tf-tests'
    if: github.event.issue.pull_request && contains(github.event.comment.body, '/run-vdi-module-tf-tests')
    runs-on: ubuntu-latest
    environment: aws-ci

    defaults:
      run:
        working-directory: ${{ github.workspace }}/modules/vdi/

    steps:
      # Comment on PR that the workflow has been scheduled
      - name: Comment on PR that the workflow has been scheduled
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const name = '${{ github.workflow	}}';
            const url = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
            const body = `Terraform tests have been scheduled üß™ \n${url}`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })

      # Get branch of PR
      - name: Get branch of PR
        uses: xt0rted/pull-request-comment-branch@v3
        id: comment-branch

      # Set latest commit status as pending
      - name: Set latest commit status as pending
        uses: myrotvorets/set-commit-status-action@master
        with:
          sha: ${{ steps.comment-branch.outputs.head_sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: pending

      # Comment on PR that the workflow is in progress
      - name: Comment on PR that the workflow is in progress
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const name = '${{ github.workflow	}}';
            const url = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
            const body = `Terraform tests are in progress ‚è≥ \n${url}`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })

      # Checkout the PR branch
      - name: Checkout PR branch ${{ steps.comment-branch.outputs.head_ref }}
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.comment-branch.outputs.head_sha }}
          repository: ${{ steps.comment-branch.outputs.head_repo }}
          fetch-depth: 0

      # Use GitHub Action secret to assume existing AWS IAM Role using OIDC connection
      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{secrets.AWS_CI_ROLE_ARN}}
          aws-region: ${{vars.AWS_REGION}}
          role-session-name: GitHub-OIDC-Terraform

      # Install the preferred version of the Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.0

      # Format the Terraform code, continue even if there is an error
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

        # Initialize a new or existing Terraform working directory
      - name: Terraform Init
        id: init
        run: terraform init

      # Run the actual Terraform tests
      - name: Terraform Test
        id: test
        run: terraform test
        # run terraform test -filter="tests/<your-desired-test>"

      # 7. Comment on PR the result of the workflow
      - name: Add workflow result as comment on PR
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const name = '${{ github.workflow	}}';
            const url = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
            const success = '${{ job.status }}' === 'success';
            const body = `${name}: ${success ? '‚úÖ The Terraform tests have completed successfully. Time for some Choreography and Merriment! ü™©' : '‚ùå The Terraform tests have completed with errors. Please review the failed GitHub action to resolve. Lumon expects more from you. üôÅ'}\n${url}`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })

      # 8. Set the latest commit status to be the job status
      - name: Set latest commit status as ${{ job.status }}
        uses: myrotvorets/set-commit-status-action@master
        if: always()
        with:
          sha: ${{ steps.comment-branch.outputs.head_sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
